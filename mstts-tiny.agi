#!/usr/bin/env perl

#
# AGI script that uses Bing Text To Speech API for speech synthesis.
#
# Copyright (C) 2016, Lefteris Zafiris <zaf@fastmail.com>
#
# This program is free software, distributed under the terms of
# the GNU General Public License Version 2. See the COPYING file
# at the top of the source tree.
#
# -----
# Usage
# -----
# agi(mstts.agi,"text",[language],[intkey],[gender]): This will invoke the Bing TTS
# engine, render the text string to speech and play it back to the user.
# If 'intkey' is set the script will wait for user input. Any given interrupt keys will
# cause the playback to immediately terminate and the dialplan to proceed to the
# matching extension (this is mainly for use in IVR, see README for examples).
#
# The script contacts Microsoft Bing TTS service in order to get the voice data
# which then stores in a local cache (by default /tmp/) for future use.
#
# Parameters like default language, caching and cache dir
# can be set up by altering the following variables:
# Default language: $lang
# Speaker gender:   $gender
# Chace:            $usecache
# Chache directory: $cachedir
#

use warnings;
use strict;
use utf8;
use Encode qw(decode encode);
use File::Basename qw(basename);
use File::Temp qw(tempfile);
use File::Copy qw(move);
use File::Path qw(mkpath);
use Digest::MD5 qw(md5_hex);
use HTTP::Tiny;
$| = 1;

# ------------------------------ #
#   User defined parameters:     #
# ------------------------------ #
# Bing API Key                   #
my $key = "";

# Default language               #
my $lang = 'en-US';

# Default speaker gender         #
my $gender ='Female';

# Use of cache mechanism         #
my $usecache = 1;

# Cache directory path           #
my $cachedir = '/tmp';

# Verbose debugging messages     #
my $debug = 0;

# ------------------------------ #

my %AGI;
my @text;
my @result;
my $atoken;
my $fh;
my $tmpname;
my $http;
my $intkey  = "";
my $tmpdir  = "/tmp";
my $maxlen  = 4096;
my $timeout = 10;
my $url     = "https://speech.platform.bing.com/synthesize";
my %lang_list = get_lang_list();

# Store AGI input: Text, Language, Interrupt, Gender #
($AGI{arg_1}, $AGI{arg_2}, $AGI{arg_3}, $AGI{arg_4}) = @ARGV;
while (<STDIN>) {
	chomp;
	last if (!length);
	$AGI{$1} = $2 if (/^agi_(\w+)\:\s+(.*)$/);
}

my $name = " -- $AGI{request}:";

# Sanitising input text #
$AGI{arg_1} = decode('utf8', $AGI{arg_1});
for ($AGI{arg_1}) {
	s/[\\|*~<>^\(\)\[\]\{\}[:cntrl:]]/ /g;
	s/\s+/ /g;
	s/^\s|\s$//g;
	fatal_log("No text passed for synthesis.") if (!length);
	$_ .= "." unless (/^.+[.,?!:;]$/);
	@text = /.{1,1000}[.,?!:;]|.{1,1000}\s/g;
}

# Setting up language, gender and interrupt keys #
if (length($AGI{arg_2})) {
	if ($AGI{arg_2} =~ /^[a-z]{2}-[A-Z]{2}$/) {
		$lang = $AGI{arg_2};
	} else {
		fatal_log("Invalid language setting.");
	}
}
if (length($AGI{arg_3})) {
	$intkey = "0123456789#*" if ($AGI{arg_3} eq "any");
	$intkey = $AGI{arg_3} if ($AGI{arg_3} =~ /^[0-9*#]+$/);
}
if (length($AGI{arg_4})) {
	if ($AGI{arg_4} eq "m") {
		$gender = 'Male';
	} elsif  ($AGI{arg_4} eq "f") {
		$gender = 'Female';
	} else {
		console_log("Invalid Gender setting, using default.");
	}
}
fatal_log("Unsupported language/gender combination.") if (!exists $lang_list{"$lang-$gender"});

# Check cache path size: dir length + md5 + file extension #
if ($usecache) {
	if ((length($cachedir) + 32 + 6) < $maxlen) {
		mkpath("$cachedir") unless (-d "$cachedir");
	} else {
		console_log("Cache path size exceeds limit. Disabling cache.");
		$usecache = 0;
	}
}

# Answer channel if not already answered #
print "CHANNEL STATUS\n";
@result = checkresponse();
if ($result[0] == 4) {
	print "ANSWER\n";
	@result = checkresponse();
	if ($result[0] != 0) {
		fatal_log("Failed to answer channel.");
	}
}

# Detecting format based on the channel codec. #
my $format;
my ($fexten, $samplerate) = detect_format();
if ($fexten eq 'ulaw') {
	$format = "raw-8khz-8bit-mono-mulaw";
} else {
	$format = 'raw-16khz-16bit-mono-pcm';
}

# Synthesize speech using MS Translator API #
foreach my $line (@text) {
	$line = encode('utf8', $line);
	$line =~ s/^\s+|\s+$//g;
	next if (length($line) == 0);
	if ($debug) {
		console_log(
			"Text passed for synthesis: $line, Language: $lang",
			"Interrupt keys: $intkey, Sample rate: $samplerate",
			"Caching: $usecache, Cache dir: $cachedir"
		);
	}
	my $filename;
	if ($usecache) {
		$filename = md5_hex("$line.$lang.$gender.$format");
		# Stream file from cache if it exists #
		if (-r "$cachedir/$filename.$fexten") {
			console_log("File already in cache.") if ($debug);
			my $res = playback("$cachedir/$filename", $intkey);
			last if ($res > 0);
			die if ($res < 0);
			next;
		}
	}
	# Initialise User angent #
	if (!$http) {
		$http = HTTP::Tiny->new(
			agent      => 'Asterisk Bing TTS module',
			timeout    => $timeout,
			verify_SSL => 1,
		);
	}
	# Get access token #
	$atoken = get_access_token() if (!$atoken);
	fatal_log("No API key found. Aborting.") if (!$atoken);

	# Hnadle interrupts #
	$SIG{'INT'} = \&int_handler;
	$SIG{'HUP'} = \&int_handler;

	my $data = "<speak version='1.0' xml:lang='" . $lang . "'><voice xml:lang='". $lang
		. "' xml:gender='" . $gender . "' name='" . $lang_list{"$lang-$gender"}
		. "'>" . $line ."</voice></speak>";
	my %headers = (
		"Content-type" => "application/ssml+xml",
		"X-Microsoft-OutputFormat" => $format,
		"Authorization" => $atoken,
	);
	my %options = (
		"headers" => \%headers,
		"content" => $data,
	);
	my $response = $http->request('POST', $url, \%options);
	fatal_log("Failed to fetch file:", $response->{status}, $response->{reason}) unless ($response->{success});

	($fh, $tmpname) = tempfile("bingtts_XXXXXXXX", SUFFIX => ".$fexten", DIR => $tmpdir, UNLINK => 1);
	binmode $fh;
	print $fh $response->{content};
	close $fh;
	# Playback and save file in cache #
	my $res = playback("$tmpdir/" . basename($tmpname, ".$fexten"), $intkey);
	die if ($res < 0);
	if ($usecache) {
		console_log("Saving file $filename to cache") if ($debug);
		move($tmpname, "$cachedir/$filename.$fexten");
	} else {
		unlink $tmpname;
	}
	last if ($res > 0);
}
exit;

sub get_access_token {
# Obtaining an Access Token #
	my $token;
	my $expire;
	my $tempfl;
	my $fh;
	my $spool = $ENV{'AST_SPOOL_DIR'};
	my $tkfile = $spool . "/tmp/bing-tts.token";

	if (-f $tkfile && open($fh, "<", $tkfile)) {
		console_log("Reading access token from file.") if ($debug);
		while (<$fh>) {
			/^expire:(\d+)$/ and $expire = $1;
			/^token:(.+)$/ and $token = $1;
		}
		close $fh;
	}
	if (!$token or time > $expire - 10) {
		$token = '';
		console_log("Getting a new access token.") if ($debug);
		my %headers = (
			"Ocp-Apim-Subscription-Key" => $key,
			"Content-Length" => 0,
		);
		my %options = ( 'headers' => \%headers );
		my $response = $http->request(
			'POST',
			"https://api.cognitive.microsoft.com/sts/v1.0/issueToken",
			\%options
		);
		if ($response->{success}) {
			$token = "Bearer " . $response->{content};
			$expire = time + 600;
			if ($spool) {
				($fh, $tempfl) = tempfile();
				print $fh "expire:$expire\n";
				print $fh "token:$token\n";
				close $fh;
				move($tempfl, $tkfile);
			}
		} else {
			console_log("Failed to get Access Token:", $response->{status}, $response->{reason}) if ($debug);
		}
	}
	return $token;
}

sub checkresponse {
	my $input = <STDIN>;
	my @values;

	chomp $input;
	if ($input =~ /^200 result=(-?\d+)\s?(.*)$/) {
		@values = ("$1", "$2");
	} else {
		$input .= <STDIN> if ($input =~ /^520-Invalid/);
		warn "$name Unexpected result: $input\n";
		@values = (-1, -1);
	}
	return @values;
}

sub playback {
	my ($file, $keys) = @_;
	my @response;

	print "STREAM FILE $file \"$keys\"\n";
	@response = checkresponse();
	if ($response[0] >= 32 && chr($response[0]) =~ /[\w*#]/) {
		console_log("Got digit ", chr($response[0])) if ($debug);
		print "SET EXTENSION ", chr($response[0]), "\n";
		checkresponse();
		print "SET PRIORITY 1\n";
		checkresponse();
	} elsif ($response[0] == -1) {
		console_log("Failed to play $file");
	}
	return $response[0];
}

sub detect_format {
# Detect the sound format used #
	my @format;
	print "GET FULL VARIABLE \${CHANNEL(audionativeformat)}\n";
	my @reply = checkresponse();
	for ($reply[1]) {
		if    (/(silk|sln)12/)                    { @format = ("sln16", 16000); }
		elsif (/(speex|slin|silk)16|g722|siren7/) { @format = ("sln16", 16000); }
		elsif (/(speex|slin|celt)32|siren14/)     { @format = ("sln16", 16000); }
		elsif (/(celt|slin)44/)                   { @format = ("sln16", 16000); }
		elsif (/(celt|slin)48/)                   { @format = ("sln16", 16000); }
		else                                      { @format = ("ulaw",   8000); }
	}
	return @format;
}

sub get_lang_list {
	my %list = (
		"ar-EG-Female"	=> "Microsoft Server Speech Text to Speech Voice (ar-EG, Hoda)",
		"de-DE-Female"	=> "Microsoft Server Speech Text to Speech Voice (de-DE, Hedda)",
		"de-DE-Male"	=> "Microsoft Server Speech Text to Speech Voice (de-DE, Stefan, Apollo)",
		"en-AU-Female"	=> "Microsoft Server Speech Text to Speech Voice (en-AU, Catherine)",
		"en-CA-Female"	=> "Microsoft Server Speech Text to Speech Voice (en-CA, Linda)",
		"en-GB-Female"	=> "Microsoft Server Speech Text to Speech Voice (en-GB, Susan, Apollo)",
		"en-GB-Male"	=> "Microsoft Server Speech Text to Speech Voice (en-GB, George, Apollo)",
		"en-IN-Male"	=> "Microsoft Server Speech Text to Speech Voice (en-IN, Ravi, Apollo)",
		"en-US-Female"	=> "Microsoft Server Speech Text to Speech Voice (en-US, ZiraRUS)",
		"en-US-Male"	=> "Microsoft Server Speech Text to Speech Voice (en-US, BenjaminRUS)",
		"es-ES-Female"	=> "Microsoft Server Speech Text to Speech Voice (es-ES, Laura, Apollo)",
		"es-ES-Male"	=> "Microsoft Server Speech Text to Speech Voice (es-ES, Pablo, Apollo)",
		"es-MX-Male"	=> "Microsoft Server Speech Text to Speech Voice (es-MX, Raul, Apollo)",
		"fr-CA-Female"	=> "Microsoft Server Speech Text to Speech Voice (fr-CA, Caroline)",
		"fr-FR-Female"	=> "Microsoft Server Speech Text to Speech Voice (fr-FR, Julie, Apollo)",
		"fr-FR-Male"	=> "Microsoft Server Speech Text to Speech Voice (fr-FR, Paul, Apollo)",
		"it-IT-Male"	=> "Microsoft Server Speech Text to Speech Voice (it-IT, Cosimo, Apollo)",
		"ja-JP-Female"	=> "Microsoft Server Speech Text to Speech Voice (ja-JP, Ayumi, Apollo)",
		"ja-JP-Male"	=> "Microsoft Server Speech Text to Speech Voice (ja-JP, Ichiro, Apollo)",
		"pt-BR-Male"	=> "Microsoft Server Speech Text to Speech Voice (pt-BR, Daniel, Apollo)",
		"ru-RU-Female"	=> "Microsoft Server Speech Text to Speech Voice (ru-RU, Irina, Apollo)",
		"ru-RU-Male"	=> "Microsoft Server Speech Text to Speech Voice (ru-RU, Pavel, Apollo)",
		"zh-CN-Female"	=> "Microsoft Server Speech Text to Speech Voice (zh-CN, HuihuiRUS)",
		"zh-CN-Female"	=> "Microsoft Server Speech Text to Speech Voice (zh-CN, Yaoyao, Apollo)",
		"zh-CN-Male"	=> "Microsoft Server Speech Text to Speech Voice (zh-CN, Kangkang, Apollo)",
		"zh-HK-Female"	=> "Microsoft Server Speech Text to Speech Voice (zh-HK, Tracy, Apollo)",
		"zh-HK-Male"	=> "Microsoft Server Speech Text to Speech Voice (zh-HK, Danny, Apollo)",
		"zh-TW-Female"	=> "Microsoft Server Speech Text to Speech Voice (zh-TW, Yating, Apollo)",
		"zh-TW-Male"	=> "Microsoft Server Speech Text to Speech Voice (zh-TW, Zhiwei, Apollo)",
	);
	return %list;
}

sub console_log {
	foreach my $message (@_) {
		warn "$name $message\n";
		print "NOOP \"$name $message\"\n";
		checkresponse();
	}
}

sub fatal_log {
	console_log(@_);
	die;
}

sub int_handler {
	die "$name Interrupt signal received, terminating...\n";
}

END {
	if ($tmpname) {
		warn "$name Cleaning temp files.\n" if ($debug);
		unlink glob "$tmpname*";
	}
}
