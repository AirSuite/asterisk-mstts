#!/usr/bin/env perl

#
# AGI script that uses MS Translator API for speech synthesis.
#
# Copyright (C) 2012, Lefteris Zafiris <zaf.000@gmail.com>
#
# This program is free software, distributed under the terms of
# the GNU General Public License Version 2. See the COPYING file
# at the top of the source tree.
#
# -----
# Usage
# -----
# agi(mstts.agi,"text",[language],[intkey]): This will invoke the Microsoft TTS engine,
# render the text string to speech and play it back to the user. If 'intkey' is set the
# script will wait for user input. Any given interrupt keys will cause the playback
# to immediately terminate and the dialplan to proceed to the matching extension
# (this is mainly for use in IVR, see README for examples).
#
# The script contacts Microsoft Translate TTS service in order to get the voice data
# which then stores in a local cache (by default /tmp/) for future use.
#
# In order to use this script you have to subscribe to the Microsoft
# Translator API on Azure Marketplace:
# https://datamarket.azure.com/developer/applications/
#
# Existing API Keys from http://www.bing.com/developers/appids.aspx
# still work but they are considered deprecated and this method
# is no longer supported.
#
# Parameters like default language, sample rate, caching and cache dir
# can be set up by altering the following variables:
# Default langeuage: $lang
# Sample rate:       $samplerate
# Chace:             $usecache
# Chache directory:  $cachedir
#

use warnings;
use strict;
use File::Temp qw(tempfile);
use File::Copy qw(move);
use File::Path qw(mkpath);
use Digest::MD5 qw(md5_hex);
use CGI::Util qw(escape);
use LWP::UserAgent;
use LWP::ConnCache;
$| = 1;

# ----------------------------------- #
#   User defined parameters:          #
# ----------------------------------- #
# Your Azure Marketplace credentials. #
my $clientid = "";
my $clientsecret = "";

#       ****DEPRECATED****            #
#  Your Bing App ID                   #
my $appid   = "";

# Default language                    #
my $lang = "en";

# Output audio sample rate            #
my $samplerate = 8000;

# Use of cache mechanism              #
my $usecache = 1;

# Cache directory path                #
my $cachedir = "/tmp";

# Verbose debugging messages          #
my $debug = 0;

# ----------------------------------- #

my %AGI;
my @text;
my $fh;
my $tmpname;
my $filename;
my $fexten;
my @result;
my $name;
my $format    = "audio/mp3";
my $quality   = "MaxQuality";
my $intkey    = "";
my $tmpdir    = "/tmp";
my $maxlen    = 2048;
my $timeout   = 10;
my $url       = "http://api.microsofttranslator.com/V2/Http.svc";
my $sox       = `/usr/bin/which sox`;
my $mpg123 = `/usr/bin/which mpg123`;

# Store AGI input #
while (<STDIN>) {
	chomp;
	last if (!length);
	$AGI{$1} = $2 if (/^agi_(\w+)\:\s+(.*)$/);
}
($AGI{arg_1}, $AGI{arg_2}, $AGI{arg_3}) = @ARGV;

$name = " -- $AGI{request}:";

#if ($debug) {
#	warn "$name AGI Environment Dump:\n";
#	warn "$name $_ = $AGI{$_}\n" foreach (sort keys %AGI);
#}

# Get access token if no AppID is defined #
$appid = get_access_token() if (!$appid);
die "$name No API key found. Aborting.\n" if (!$appid);

# Abort if required programs not found. #
die "$name sox or mpg123 is missing. Aborting.\n" if (!$sox || !$mpg123);

chomp($sox, $mpg123);
warn "$name Found sox in: $sox, mpg123 in: $mpg123\n" if ($debug);

# Sanitising input #
for ($AGI{arg_1}) {
	s/[\\|*~<>^\(\)\[\]\{\}[:cntrl:]]/ /g;
	s/\s+/ /g;
	s/^\s|\s$//g;
	die "$name No text passed for synthesis.\n" if (!length);
	$_ .= "." unless (/^.+[.,?!:;]$/);
	@text = /.{1,1000}[.,?!:;]|.{1,1000}\s/g;
}

# Setting language and interrupt keys #
if (length($AGI{arg_2})) {
	if ($AGI{arg_2} =~ /[a-z]{2}(-[a-z]{2,3})?/) {
		$lang = $AGI{arg_2};
	} else {
		die "$name Invalid language setting.\n";
	}
}
if (length($AGI{arg_3})) {
	$intkey = "0123456789#*" if ($AGI{arg_3} eq "any");
	$intkey = $AGI{arg_3} if ($AGI{arg_3} =~ /^[0-9*#]+$/);
}

# Setting filename extension according to sample rate. #
if ($samplerate == 16000) {
	$fexten = "sln16";
} else {
	$fexten     = "sln";
	$samplerate = 8000;
}

# Check cache path size: dir length + md5 + file extension #
if ($usecache && ((length($cachedir) + 32 + 6) > $maxlen)) {
	warn "$name Cache path size exceeds limit. Disabling cache.\n";
	$usecache = 0;
}

# Answer channel if not already answered #
print "CHANNEL STATUS\n";
@result = checkresponse();
if ($result[0] == 4) {
	print "ANSWER\n";
	checkresponse();
}

# Synthesize speech using MS Translator API #
my $ua = LWP::UserAgent->new;
$ua->env_proxy;
$ua->conn_cache(LWP::ConnCache->new());
$ua->timeout($timeout);

foreach my $line (@text) {
	$line =~ s/^\s+|\s+$//g;
	next if (length($line) == 0);
	if ($debug) {
		warn "$name Text passed for synthesis: $line\n",
			"$name Language: $lang, Interrupt keys: $intkey, Sample rate: $samplerate\n",
			"$name Caching: $usecache, Cache dir: $cachedir\n";
	}
	if ($usecache) {
		$filename = md5_hex($line);
		# Stream file from cache if it exists #
		if (-r "$cachedir/$filename.$fexten") {
			warn "$name File already in cache.\n" if ($debug);
			my $res = playback("$cachedir/$filename", $intkey);
			last if ($res > 0);
			next;
		}
	}
	$line = escape($line);

	# Hnadle interrupts #
	$SIG{'INT'} = \&int_handler;
	$SIG{'HUP'} = \&int_handler;

	($fh, $tmpname) = tempfile("mstts_XXXXXX", DIR => $tmpdir, UNLINK => 1);

	my $ua_request = HTTP::Request->new('GET' =>
		"$url/Speak?text=$line&language=$lang&format=$format&options=$quality&appid=$appid"
	);

	my $ua_response = $ua->request($ua_request, $tmpname);

	die "$name Failed to fetch file.\n" unless ($ua_response->is_success);

	# Convert mp3 file to 16bit 8Khz or 16kHz mono raw #
	system($mpg123, "-q", "-w", "$tmpname.wav", $tmpname) == 0
		or die "$name $mpg123 failed: $?\n";
	system($sox, "$tmpname.wav", "-q", "-r", $samplerate, "-t", "raw", "$tmpname.$fexten") == 0
		or die "$name $sox failed: $?\n";
	unlink "$tmpname.wav";

	# Playback and save file in cache #
	my $res = playback($tmpname, $intkey);
	if ($usecache) {
		mkpath("$cachedir") unless (-d "$cachedir");
		warn "$name Saving file $filename to cache\n" if ($debug);
		move("$tmpname.$fexten", "$cachedir/$filename.$fexten");
	} else {
		unlink "$tmpname.$fexten";
	}
	last if ($res > 0);
}
exit;

sub get_access_token {
# Obtaining an Access Token #
	my $ua = LWP::UserAgent->new(ssl_opts => {verify_hostname => 1});
	$ua->timeout($timeout);
	my $response = $ua->post(
		"https://datamarket.accesscontrol.windows.net/v2/OAuth2-13/",
		[
			client_id     => $clientid,
			client_secret => $clientsecret,
			scope         => 'http://api.microsofttranslator.com',
			grant_type    => 'client_credentials',
		],
	);
	if ($response->is_success) {
		$response->content =~ /^\{"access_token":"(.*?)","token_type":".*"\}$/;
		my $token = escape("Bearer $1");
		return("$token");
	} else {
		die "$name Failed to get Access Token.\n";
	}
}

sub checkresponse {
	my $input = <STDIN>;
	my @values;

	chomp $input;
	if ($input =~ /^200/) {
		$input =~ /result=(-?\d+)\s?(.*)$/;
		if (!length($1)) {
			warn "$name Command failed: $input\n";
			@values = ("-1");
		} else {
			warn "$name Command returned: $input\n" if ($debug);
			@values = ("$1", "$2");
		}
	} else {
		warn "$name Unexpected result: $input\n";
		@values = ("-1");
	}
	return @values;
}

sub playback {
	my ($file, $keys) = @_;
	my @response;

	print "STREAM FILE $file \"$keys\"\n";
	@response = checkresponse();
	if ($response[0] >= 32 && chr($response[0]) =~ /[\w*#]/) {
		warn "$name Got digit ", chr($response[0]), "\n" if ($debug);
		print "SET EXTENSION ", chr($response[0]), "\n";
		checkresponse();
		print "SET PRIORITY 1\n";
		checkresponse();
		return $response[0];
	} elsif ($response[0] == -1) {
		warn "$name Failed to play $file\n";
		return -1;
	}
	return 0;
}

sub int_handler {
	die "$name Interrupt signal received, terminating...\n";
}

END {
	if ($tmpname) {
		warn "$name Cleaning temp files.\n" if ($debug);
		unlink glob "$tmpname*";
	}
}
